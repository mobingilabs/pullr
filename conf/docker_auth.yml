server:
  addr: ":5001"
  certificate: "/certs/pullr.crt"
  key: "/certs/pullr.key"

token:
  issuer: "Acme auth server"  # Must match issuer in the Registry config.
  expiration: 900
  certificate: /certs/pullr.crt
  key: /certs/pullr.key

# users:
#   # Password is specified as a BCrypt hash. Use `htpasswd -nB USERNAME` to generate.
#   "admin":
#     password: "$2y$05$LO.vzwpWC5LZGqThvEfznu8qhb5SGqvBSWY1J3yZ4AxtMRZ3kN5jC"  # badmin
#   "user":
#     password: "$2y$05$WuwBasGDAgr.QCbGIjKJaep4dhxeai9gNZdmBnQXqpKly57oNutya"  # 123

acl:
  - match: {account: "admin"}
    actions: ["*"]
    comment: "Admin has full access to everything."
  - match: {account: "user"}
    actions: ["pull"]
    comment: "User \"user\" can pull stuff."
  - match: {account: "/.+/", name: "${account}/*"}
    actions: ["*"]
    comment: "Logged in users have full access to images that are in their 'namespace'"
  # Access is denied by default.

mongoauth:
  # Essentially all options are described here: https://godoc.org/gopkg.in/mgo.v2#DialInfo
  dialinfo:
    # The MongoDB hostnames or IPs to connect to.
    addrs: ["pullr-mongodb"]
    # The time to wait for a server to respond when first connecting and on
    # follow up operations in the session. If timeout is zero, the call may
    # block forever waiting for a connection to be established.
    # (See https://golang.org/pkg/time/#ParseDuration for a format description.)
    timeout: "10s"
    # Database name that will be used on the MongoDB server.
    database: "pullr"
    # The username with which to connect to the MongoDB server.
    username: "pullr"
    # Path to the text file with the password in it.
    passwordfile: "/secrets/mongopass.txt"
    # Enable TLS connection to MongoDB (only enable this if your server supports it)
    enabletls: false
    # Name of the collection in which ACLs will be stored in MongoDB.
  collection: "users"
  # Unlike acl_mongo we don't cache the full user set. We just query mongo for
  # an exact match for each authorization
